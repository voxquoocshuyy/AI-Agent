trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - tests/**
      - *.sln
      - *.csproj

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'AI.Agent.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dotnetVersion: '8.0.x'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Install .NET SDK'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global dotnet-ef'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'tests/**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/**/CodeCoverage'

    - task: DotNetCoreCLI@2
      displayName: 'Publish API'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish API Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/api'
        ArtifactName: 'api'
        publishLocation: 'Container'

- stage: Security
  displayName: 'Security Scan'
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: 'Run Security Scan'
    steps:
    - task: SnykSecurityScan@1
      displayName: 'Run Snyk Security Scan'
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        failOnIssues: true
        monitorOnBuild: true
        projectName: 'AI.Agent'
        severityThreshold: 'high'

- stage: Deploy
  displayName: 'Deploy'
  dependsOn: Security
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download API Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'api'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: 'Azure Subscription'
              appName: 'ai-agent-staging'
              package: '$(System.ArtifactsDirectory)/api/*.zip'
              deploymentMethod: 'auto'

  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    environment: 'production'
    dependsOn: DeployToStaging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download API Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'api'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: 'Azure Subscription'
              appName: 'ai-agent-prod'
              package: '$(System.ArtifactsDirectory)/api/*.zip'
              deploymentMethod: 'auto' 